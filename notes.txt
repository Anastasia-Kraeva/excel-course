* webpack.config.js

Концепции
- mode (режим) - позволяет включить встроенную оптимизацию webpack, соответствующую каждой среде (development, production или none).
- entry - указывает на то, какой модуль WebPack должен использовать, чтобы начать строить свой внутренний граф зависимостей.
  webpack выяснит, от каких других модулей и библиотек зависит эта точка входа (прямо или косвенно).
- output - свойство, сообщает webpack, где создавать пакеты и как назвать эти файлы
- loaders - По умолчанию webpack понимает только файлы JavaScript и JSON. Загрузчики позволяют webpack обрабатывать
  другие типы файлов и преобразовывать их в допустимые модули. На высоком уровне загрузчики имеют два свойства в
  конфигурации вашего веб-пакета (записывается в rules):
    test - идентифицирует свойство, которое файл или файлы должны быть преобразованы.
    use - Свойство указывает, какой загрузчик должен быть использован для трансформирующей.
- plugins - для выполнения более широкого круга задач, таких как оптимизация пакетов
- browser compatibility - позволяет настроить совместимость с браузерами
- environment (среда) (Webpack 5 работает на Node.js)
-----------------------------------------------------------------------------------------------------------------------

Для настройки процесса компиляции доступны различные интерфейсы например:
- CLI (Интерфейс командной строки) - для настройки и взаимодействия с вашей сборкой. Это особенно полезно в случае раннег
  прототипирования и профилирования. По большей части, интерфейс командной строки используется для запуска процесса с
  использованием файла конфигурации и нескольких флагов (например --env).
- module - При обработке модулей с помощью webpack важно понимать различные синтаксисы модулей, в частности методы и переменные, которые поддерживаются.
- plugins - Интерфейс плагина позволяет пользователям напрямую подключаться к процессу компиляции.
Плагины могут регистрировать обработчики на хуках жизненного цикла, которые выполняются на разных этапах компиляции.
-----------------------------------------------------------------------------------------------------------------------

module - (Модули будут иметь доступ к определенным данным из процесса компиляции module и другим переменным)
    .exports - Определяет значение, которое будет возвращено, когда потребитель require вызовет модуль (по умолчанию новый объект).

process.env - глобальная переменная process.env доступна приложению во время его выполнения благодаря внутренним механизмам Node.
Она представляет собой состояние окружения системы в момент запуска приложения.
'process.env.NODE_ENV' - конструкция, с помощью которой можно обратиться к переменной, заданной в системе.
-----------------------------------------------------------------------------------------------------------------------

resolve
  extensions - позволяет не использовать расширение при импорте. Если несколько файлов имеют одно и то же имя,
  но разные расширения, webpack разрешит файл с расширением, указанным первым в массиве, и пропустит остальные.
  alias - Создает псевдонимы путей для import. Чтобы в путях использовать псевдоним для группы часто используемых папок
devtool - опция определяет, будут ли и как будут создаваться исходные карты.
devServer - предоставляет API-интерфейс Node.js, который можно использовать во время выполнения Node.js.
Это Express Node.js сервер, который работает на порту 8080. Он вызывает Webpack изнутри, что дает дополнительны
возможности вроде перезагрузки браузера и/или замены только что измененного модуля
  hot - Включает функцию горячей замены модуля webpack (чтобы обновлялось только то, что изменилось)
plugins
  Path - модуль Node.js, является встроенным и предоставляет набор функций для работы с путями в файловой системе.
  https://nodejsdev.ru/doc/path/
  CleanWebpackPlugin - используется для удаления старых и неиспользуемых файлов в каталоге dist
  HTMLWebpackPlugin - для динамического создания файла с актуальными путями импортов
    template - относительный или абсолютный путь к шаблону
  CopyPlugin - копирует отдельные файлы или целые каталоги, которые уже существуют, в каталог сборки (напр favicon)
    patterns - параметр для указания шаблонов, связанных с файлом для плагина
    options
      concurrency - ограничивает количество одновременных запросов
  MiniCssExtractPlugin - Этот плагин извлекает CSS в отдельные файлы. Он создает файл CSS для каждого файла JS,
  который содержит CSS. Он поддерживает загрузку CSS и SourceMaps по запросу. Без html не будет загружен на страницу.
    filename - параметр определяет имя каждого выходного файла CSS. Работает как output.filename
  output - ключ верхнего уровня содержит набор параметров, указывающих веб-пакету, как и где он должен выводить ваши пакеты,
  ресурсы и все остальное, что вы объединяете или загружаете с помощью веб-пакета.
    filename - опция определяет имя каждого выходного пакета.
    Пакет записывается в каталог, указанный output.path опцией.
module - параметры определяют, как будут обрабатываться различные типы модулей в рамках проекта
  rules - св-во в котором указываются вложенные правила (например test или issuerLayer). Эти правила оцениваются только
  при совпадении родительского условия Rule. Каждое вложенное правило может содержать собственные условия.
    test - Включите все модули, прошедшие тестовое утверждение.
    use - массив UseEntry, который применяется к модулям. Каждая запись определяет используемый загрузчик.
    Передача строки (т.е. use: [ 'style-loader' ]) - это ярлык к свойству загрузчика (т.е. use: [ { loader: 'style-loader '} ]).
    Загрузчики можно объединить в цепочку, загрузчики будут применяться с конца
    exclude - исключает модули соответствующие любому из переданных условий
    loader - ярлык на Rule.use: [ { loader } ]
    presets (предварительно установить, предварительно настроить)
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
package.json

keywords - помогает людям обнаружить ваш пакет в том виде, в котором он указан в npm search
bugs - URL-адрес системы отслеживания проблем вашего проекта и/или адрес электронной почты, на который следует
сообщать о проблемах. Это полезно для людей, у которых возникают проблемы с вашим пакетом.
license - чтобы люди знали, как им разрешено его использовать, и любые ограничения, которые вы на него накладываете.


html
  Метатеги - предназначенны для предоставления структурированных метаданных (дополнительных, сопроводительных) о веб-странице.
  Метатег X-UA-Compatible позволяет веб-авторам выбирать, в какой версии Internet Explorer должна отображаться страница.
webpack-cli - инструмент берет опции через инструмент CLI, а также через файл конфигурации (по умолчанию – webpack. config. js) и передает их в Webpack для сборки. Он по большей части пригодится вам только для последующей генерации production-сборок.
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------

теория
Webpack, как сборщик модулей, предоставляет 2 интерфейса: webpack CLI и webpack-dev-server

существует 2 способа передачи опций в webpack-dev-server:
через объект devServer файла webpack.config.js;d (иногда не работает)
через опции CLI.

//Via CLI
webpack-dev-server --hot --inline
//Via webpack.config.js
devServer: {
 inline: true,
 hot:true
 }

Свойство path сообщает Webpack, где хранить результат, тогда как свойство publicPath используется в нескольких плагинах
Webpack для обновления URL внутри CSS- и HTML-файлов во время генерации production-сборок.